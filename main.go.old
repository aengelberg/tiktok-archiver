package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
)

type Video struct {
	Date string `json:"Date"`
	Link string `json:"Link"`
}

func main() {
	// Create a new GUI application
	myApp := app.New()
	myWindow := myApp.NewWindow("TikTok Video Downloader")

	// Create GUI elements
	textarea := widget.NewMultiLineEntry()
	textarea.SetPlaceHolder("Paste the contents of your TikTok archive here")
	button := widget.NewButton("Download", func() {
		// Parse the videos from the archive text
		videos, err := parseVideos(textarea.Text)
		if err != nil {
			errorMessage(fmt.Sprintf("Error parsing videos: %v", err))
			return
		}

		// Download each video
		for _, video := range videos {
			err = downloadVideo(video.Date, video.Link)
			if err != nil {
				errorMessage(fmt.Sprintf("Error downloading video: %v", err))
				return
			}
		}

		// Show success message
		successMessage("All videos downloaded!")
	})
	status := widget.NewLabel("")

	// Create GUI layout
	content := container.New(layout.NewVBoxLayout(), textarea, button, status)
	myWindow.SetContent(content)

	// Show the GUI
	myWindow.ShowAndRun()
}

func parseVideos(text string) ([]Video, error) {
	var videos []Video
	scanner := bufio.NewScanner(strings.NewReader(text))
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "Date: ") {
			date := strings.TrimPrefix(line, "Date: ")
			scanner.Scan() // skip the next line ("Link: ")
			link := scanner.Text()
			videos = append(videos, Video{Date: date, Link: link})
		}
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return videos, nil
}

func downloadVideo(date, link string) error {
	// Send an HTTP GET request to download the video
	resp, err := http.Get(link)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Read the response body into memory
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	// Save the video to a file with the date as the name
	filename := fmt.Sprintf("%s.mp4", strings.ReplaceAll(date, " ", "-"))
	err = ioutil.WriteFile(filename, body, 0644)
	if err != nil {
		return err
	}

	return nil
}

func successMessage(msg string) {
	dialog := dialogMessage(fyne.InformationDialog, "Success", msg)
	dialog.Show()
}

func errorMessage(msg string) {
	dialog := dialogMessage(fyne.ErrorDialog, "Error", msg)
	dialog.Show()
}

func dialogMessage(dType fyne.DialogType, title, msg string) fyne.Dialog {
	myApp := app.New()
	return myApp.NewWindow(title).Content().(fyne.Dialog)
}
